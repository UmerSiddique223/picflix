CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    name VARCHAR(255),
    username VARCHAR(255) UNIQUE,
    password VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    profile_picture VARCHAR(255),
    bio nvarchar(max), --set collation to Latin1_General_100_CI_AI_SC_UTF8
    created_at DATETIME
);

CREATE TABLE Posts (
    post_id INT PRIMARY KEY,
    user_id INT FOREIGN KEY REFERENCES Users(user_id),
    caption nvarchar(max), --set collation to Latin1_General_100_CI_AI_SC_UTF8
    location varchar(50),
    created_at DATETIME
);

create table Stories (
    story_id INT PRIMARY KEY,
    user_id INT FOREIGN KEY REFERENCES Users(user_id),
    created_at DATETIME
);

CREATE TABLE Media (
    entity_id INT,
    entity_type VARCHAR(50),
    media_url VARCHAR(255),
    PRIMARY KEY (entity_id, entity_type, media_url),
    FOREIGN KEY (entity_id) REFERENCES Posts(post_id),
    FOREIGN KEY (entity_id) REFERENCES Stories(story_id)
);

CREATE TABLE Comments (
    comment_id INT PRIMARY KEY, --auto increment it
    user_id INT FOREIGN KEY REFERENCES Users(user_id),
    post_id INT FOREIGN KEY REFERENCES Posts(post_id),
    comment_text nvarchar(max), --set collation to Latin1_General_100_CI_AI_SC_UTF8
    created_atÂ DATETIME
);

CREATE TABLE Likes (
    user_id INT FOREIGN KEY REFERENCES Users(user_id),
    post_id INT FOREIGN KEY REFERENCES Posts(post_id),
    PRIMARY KEY (user_id, post_id)
);

CREATE TABLE SavedPosts (
    user_id INT FOREIGN KEY REFERENCES Users(user_id),
    post_id INT FOREIGN KEY REFERENCES Posts(post_id),
    PRIMARY KEY (user_id, post_id)
);

CREATE TABLE Friends (
    user_id INT FOREIGN KEY REFERENCES Users(user_id),
    friend_id INT FOREIGN KEY REFERENCES Users(user_id),
    PRIMARY KEY(user_id,friend_id)
);