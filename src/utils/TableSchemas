--Store procedure  <1>
CREATE PROCEDURE GetFriendPosts
    @user_id INT
AS
BEGIN
    SELECT Posts.*, Users.name, Users.profile_picture, Media.media_url AS media
    FROM Posts
    JOIN Users ON Users.user_id = Posts.user_id
    JOIN Friends ON Users.user_id = Friends.friend_id
    LEFT JOIN Media ON Posts.post_id = Media.entity_id
    WHERE Friends.user_id = @user_id
    AND Media.entity_type = 'post'
    
    UNION
    
    SELECT Posts.*, Users.name, Users.profile_picture, Media.media_url AS media
    FROM Posts
    JOIN Users ON Users.user_id = Posts.user_id
    LEFT JOIN Media ON Posts.post_id = Media.entity_id
    WHERE Users.user_id = @user_id
    AND Media.entity_type = 'post'
    
    ORDER BY created_at DESC;
END

                                                <2>
 CREATE PROCEDURE GetFriendStories
    @userId INT
AS
BEGIN
    SELECT Stories.*, Users.name, Users.profile_picture, Media.media_url AS media
    FROM Stories
    JOIN Users ON Users.user_id = Stories.user_id
    JOIN Friends ON Users.user_id = Friends.friend_id
    LEFT JOIN Media ON Stories.story_id = Media.entity_id
    WHERE Friends.user_id = @userId
    AND Media.entity_type = 'story'
    
    UNION
    
    SELECT Stories.*, Users.name, Users.profile_picture, Media.media_url AS media
    FROM Stories
    JOIN Users ON Users.user_id = Stories.user_id
    LEFT JOIN Media ON Stories.story_id = Media.entity_id
    WHERE Users.user_id = @userId
    AND Media.entity_type = 'story'
    
    ORDER BY Stories.created_at DESC;
END


                                                <3>
     CREATE PROCEDURE InsertPost
    @user_id INT,
    @caption NVARCHAR(MAX),
    @location VARCHAR(50)
AS
BEGIN
    INSERT INTO Posts (user_id, caption, created_at, location)
    OUTPUT INSERTED.post_id
    VALUES (@user_id, @caption, GETDATE(), @location);
END
 
                                                <4>
CREATE PROCEDURE CreateUser
    @username VARCHAR(255),
    @name VARCHAR(255),
    @email VARCHAR(255),
    @password VARCHAR(255)
AS
BEGIN
    INSERT INTO Users (username, name, email, password, created_at)
    VALUES (@username, @name, @email, @password, GETDATE());
END





CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    name VARCHAR(255),
    username VARCHAR(255) UNIQUE,
    password VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    profile_picture VARCHAR(255),
    bio NVARCHAR(MAX) COLLATE Latin1_General_100_CI_AI_SC_UTF8,
    created_at DATETIME
);

CREATE TABLE Posts (
    post_id INT PRIMARY KEY,
    user_id INT,
    caption NVARCHAR(MAX) COLLATE Latin1_General_100_CI_AI_SC_UTF8,
    location VARCHAR(50),
    created_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Stories (
    story_id INT PRIMARY KEY,
    user_id INT,
    created_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Media (
    entity_id INT,
    entity_type VARCHAR(50),
    media_url VARCHAR(255),
    PRIMARY KEY (entity_id, entity_type, media_url)
);

CREATE TABLE Comments (
    comment_id INT PRIMARY KEY,
    user_id INT,
    post_id INT,
    comment_text NVARCHAR(MAX) COLLATE Latin1_General_100_CI_AI_SC_UTF8,
    created_at DATETIME,
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Likes (
    user_id INT,
    post_id INT,
    PRIMARY KEY (user_id, post_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE SavedPosts (
    user_id INT,
    post_id INT,
    PRIMARY KEY (user_id, post_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (post_id) REFERENCES Posts(post_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Friends (
    user_id INT,
    friend_id INT,
    PRIMARY KEY(user_id,friend_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Conversations (
    conversation_id INT PRIMARY KEY IDENTITY(1,1),
    first_user INT,
    second_user INT,
    last_updated DATETIME,
    FOREIGN KEY (first_user) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (second_user) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Messages (
    message_id INT PRIMARY KEY IDENTITY(1,1),
    created_by INT,
    conversation_id INT,
    message_body NVARCHAR(MAX) NOT NULL,
    message_media_url NVARCHAR(255),
    sent_on DATETIME,
    FOREIGN KEY (created_by) REFERENCES Users(user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (conversation_id) REFERENCES Conversations(conversation_id) ON DELETE CASCADE ON UPDATE CASCADE
);

ALTER TABLE Likes
ADD CONSTRAINT FK_Likes_post_id
FOREIGN KEY (post_id)
REFERENCES post(post_id)
ON DELETE CASCADE;


ALTER TABLE Comments
ADD CONSTRAINT FK_Comments_post
FOREIGN KEY (post_id)
REFERENCES posts(post_id)
ON DELETE CASCADE;

ALTER TABLE SavedPosts
ADD CONSTRAINT FK_SavedPosts_post
FOREIGN KEY (post_id)
REFERENCES posts(post_id)
ON DELETE CASCADE;

-- Triggers
CREATE TRIGGER UpdateLastUpdated
ON Messages
AFTER INSERT
AS
BEGIN
    UPDATE Conversations
    SET last_updated = GETDATE()
    WHERE conversation_id IN (SELECT DISTINCT conversation_id FROM INSERTED);
END;
CREATE TRIGGER StoryExpiration
ON Stories
AFTER INSERT
AS
BEGIN
DELETE FROM Stories
WHERE created_at < DATEADD(HOUR, -24, GETDATE());
END;
